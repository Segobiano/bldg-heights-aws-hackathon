AWSTemplateFormatVersion: 2010-09-09

Description: >-
  ECR Repos, currently containing data processing repos

Parameters:
  WFName:
    Type: String

  CFTemplateS3Path:
    Type: String

  Environment:
    Type: String
    AllowedValues: [dev, test, prod]
    Default: dev

Mappings:
  ResourceAllocation:
    LidarProcessing:
      Cpu: 50
      Memory: 50

Resources:

  DataS3BucketReadWriteRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess #TODO: tighten this down to just the s3 bucket
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: taskexecution-ssm
          PolicyDocument:
            Statement:
              - Action:
                  - 'kms:Decrypt'
                  - 'ssm:GetParameters'
                  - 'secretsmanager:GetSecretValue'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com

  AlfrescoShareTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      NetworkMode: awsvpc
      Family: !Sub ${Environment}-ses-share
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref EnvironmentAlfrescoShareCPU
      ExecutionRoleArn: !GetAtt
        - TaskExecutionRole
        - Arn
      Volumes:
        - Host: {}
          Name: share_data
      Memory: !Ref EnvironmentAlfrescoShareMemory
      TaskRoleArn: !GetAtt
        - NoRightsRole
        - Arn
      ContainerDefinitions:
        - MountPoints:
            - SourceVolume: share_data
              ContainerPath: /usr/local/tomcat/logs
          Name: !Sub ${Environment}-ses-share
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/repo-urbaninst-dev-lidarprocessing:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref AlfrescoShareLogGroup
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 9510
          Environment:
            - Name: THREAD_COUNT
              Value: !Ref AlfrescoShareThreadCount
            - Name: REPO_PORT
              Value: !FindInMap
                - ecsGlobalParams
                - share
                - REPOPORT
            - Name: REPO_PROTOCOL
              Value: !FindInMap
                - ecsGlobalParams
                - share
                - REPOPROTOCOL
            - Name: CSRF_FILTER_REFERER
              Value: !FindInMap
                - ecsGlobalParams
                - share
                - CSRFFILTERREFERER
            - Name: CSRF_FILTER_ORIGIN
              Value: !FindInMap
                - ecsGlobalParams
                - share
                - CSRFFILTERORIGIN
            - Name: REPO_HOST
              Value: !FindInMap
                - shareEnvParams
                - !Ref Environment
                - REPOHOST
            - Name: JAVA_OPTS
              Value: !FindInMap
                - shareEnvParams
                - !Ref Environment
                - JAVAOPTS
        - MountPoints:
            - SourceVolume: share_data
              ContainerPath: /opt/logs
          Name: !Sub ${Environment}-ses-share-sidecar
          Secrets:
            - ValueFrom: !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':parameter/cft/ses/'
                  - !Ref Environment
                  - '-sidecar-fqdn-port'
              Name: SIDECAR_IP_PORT
            - ValueFrom: !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':parameter/cft/ses/'
                  - !Ref Environment
                  - '-sidecar-log-dir'
              Name: SIDECAR_LOG_DIR
            - ValueFrom: !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':parameter/cft/ses/'
                  - !Ref Environment
                  - '-sidecar-username-password'
              Name: SIDECAR_UN_PW
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoPrefix}sidecar:${SidecarContainerVersion}
          DockerLabels:
            sidecar_name: !Sub ${Environment}-ses-share
          PortMappings: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref AlfrescoShareSidecarLogGroup
              awslogs-stream-prefix: ecs
          Memory: 500
          Essential: true
          Environment: []